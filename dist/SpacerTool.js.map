{"version":3,"sources":["../src/SpacerTool.js"],"names":["SpacerTool","autobind","constructor","log","readBolInfo","Promise","resolve","reject","readable","args","process","stdin","fs","createReadStream","encoding","info","spaces","tabs","on","err","writable","fileContents","i","atBol","length","c","pipe","writeNewFile","untabify","s","ts","t","n","repeat","tabify","r","ns","newSpaces","newTabs","stream","PassThrough","stdout","createWriteStream","flags","toTabs","write","end","run","argv","options","string","boolean","alias","o","default","round","version","fullVersion","help","existsSync","error","bolList","includes","join","parseInt","bolType","msg"],"mappings":"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","sourcesContent":["import parseArgs from \"minimist\"\nimport fs from \"fs\"\nimport concat from \"concat-stream\"\nimport { fullVersion } from \"./version\"\nimport autobind from \"autobind-decorator\"\nimport stream from \"stream\"\n\n@autobind\nexport class SpacerTool {\n  constructor(log) {\n    this.log = log\n  }\n\n  readBolInfo() {\n    return new Promise((resolve, reject) => {\n      const readable = !this.args[\"input-file\"]\n        ? process.stdin\n        : fs.createReadStream(this.args[\"input-file\"], { encoding: \"utf8\" })\n\n      // Read the entire file && determine all the different line endings\n      let info = {\n        spaces: 0,\n        tabs: 0,\n      }\n\n      readable.on(\"error\", (err) => {\n        reject(err)\n      })\n\n      let writable = concat((fileContents) => {\n        info.fileContents = fileContents\n        let i = 0\n        let atBol = true\n\n        while (i < fileContents.length) {\n          const c = fileContents[i]\n\n          if (atBol) {\n            if (c === \" \") {\n              info.spaces += 1\n            } else if (c === \"\\t\") {\n              info.tabs += 1\n            } else {\n              atBol = false\n            }\n          } else if (c === \"\\n\") {\n            atBol = true\n          }\n\n          i += 1\n        }\n\n        resolve(info)\n      })\n      readable.pipe(writable)\n    })\n  }\n\n  async writeNewFile(info) {\n    function untabify(s, ts) {\n      let t = \"\"\n\n      for (let i = 0; i < s.length; i++) {\n        const c = s[i]\n\n        if (c === \"\\t\") {\n          const n = ts - (t.length % ts)\n\n          t += \" \".repeat(n)\n        } else {\n          t += c\n        }\n      }\n\n      return t\n    }\n\n    function tabify(s, ts, r) {\n      let ns = 0\n      let t = \"\"\n\n      for (let i = 0; i < s.length; i++) {\n        const c = s[i]\n\n        if (c === \" \") {\n          ns += 1\n        }\n\n        if (ns % ts === 0) {\n          t += \"\\t\"\n          ns = 0\n        }\n      }\n\n      if (ns > 0) {\n        if (!r) {\n          t += \" \".repeat(ns)\n        } else {\n          ns = 0\n        }\n      }\n\n      return [t, ns]\n    }\n\n    return new Promise((resolve, reject) => {\n      info.newSpaces = 0\n      info.newTabs = 0\n\n      let writable = null\n\n      if (!this.args[\"output-file\"]) {\n        writable = new stream.PassThrough()\n        writable.pipe(process.stdout)\n      } else {\n        writable = fs.createWriteStream(this.args[\"output-file\"], {\n          flags: \"w\",\n          encoding: \"utf8\",\n        })\n      }\n\n      writable.on(\"finish\", () => {\n        resolve()\n      })\n      writable.on(\"error\", (err) => {\n        reject()\n      })\n\n      const toTabs = this.args[\"new-bol\"] === \"tabs\"\n      let atBol = true\n      let ts = this.args[\"tab-size\"]\n      let r = this.args[\"round\"]\n      let i = 0\n      let s = \"\"\n\n      while (i < info.fileContents.length) {\n        const c = info.fileContents[i]\n\n        if (c === \"\\n\") {\n          s = \"\"\n          atBol = true\n          writable.write(c)\n        } else if (atBol) {\n          if (c === \" \" || c === \"\\t\") {\n            s += c\n          } else {\n            atBol = false\n\n            s = untabify(s, ts)\n\n            if (toTabs) {\n              const [t, ns] = tabify(s, ts, r)\n\n              s = t\n              info.newTabs += t.length - ns\n              info.newSpaces += ns\n            } else {\n              info.newSpaces += s.length\n            }\n\n            writable.write(s)\n            writable.write(c)\n            atBol = false\n          }\n        } else {\n          writable.write(c)\n        }\n\n        i += 1\n      }\n\n      writable.end()\n    })\n  }\n\n  async run(argv) {\n    const options = {\n      string: [\"new-bol\", \"output-file\", \"tab-size\"],\n      boolean: [\"help\", \"version\", \"round\"],\n      alias: {\n        o: \"output-file\",\n        n: \"new-bol\",\n        t: \"tab-size\",\n        r: \"round\",\n      },\n      default: {\n        round: false,\n        \"tab-size\": \"2\",\n      },\n    }\n    let args = parseArgs(argv, options)\n\n    if (args.version) {\n      this.log.info(fullVersion)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nBeginning of line normalizer.\n\nspacer [<options>] <file>\n\n<file>                      The input file. Defaults to reading from STDIN.\n-o, --output-file <file>    The output file. Can be the same as the input file. Defaults to STDOUT.\n-n, --new-bol <space>       The new BOL line spacing, either 'tabs' or 'spaces' or 'auto'.\n                            Default is to just report.\n-t, --tab-size              The tab size to assume in the existing file, in spaces. Defaults to 2.\n-r, --round                 When tabifying, rounds extra spaces down to a whole number of tabs.\n                            Defaults to false.\n--help                      Displays help\n--version                   Displays version\n`)\n      return 0\n    }\n\n    args[\"input-file\"] = args[\"_\"].length > 0 ? args[\"_\"][0] : null\n\n    if (args[\"input-file\"] && !fs.existsSync(args[\"input-file\"])) {\n      this.log.error(`File '${args[\"input-file\"]}' does not exist`)\n      return -1\n    }\n\n    const bolList = [\"tabs\", \"spaces\", \"auto\"]\n    if (args[\"new-bol\"] && !bolList.includes(args[\"new-bol\"])) {\n      this.log.error(`New BOL must be one of ${bolList.join(\", \")}`)\n      return -1\n    }\n\n    args[\"tab-size\"] = parseInt(args[\"tab-size\"])\n    this.args = args\n\n    const info = await this.readBolInfo()\n    const bolType = (s, t) => (t > 0 ? (s > 0 ? \"mixed\" : \"tabs\") : \"spaces\")\n    let msg = `'${args[\"input-file\"] || \"<STDIN>\"}', ${bolType(\n      info.spaces,\n      info.tabs\n    )}`\n\n    if (args[\"new-bol\"]) {\n      if (args[\"new-bol\"] === \"auto\") {\n        if (info.spaces > info.tabs) {\n          args[\"new-bol\"] = \"spaces\"\n        } else {\n          args[\"new-bol\"] = \"tabs\"\n        }\n      }\n\n      await this.writeNewFile(info)\n\n      msg += ` -> '${args[\"output-file\"] || \"<stdout>\"}', ${bolType(\n        info.newSpaces,\n        info.newTabs\n      )}`\n    }\n\n    this.log.info(msg)\n\n    return 0\n  }\n}\n"],"file":"SpacerTool.js"}