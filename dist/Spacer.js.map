{"version":3,"sources":["../src/spacer.js"],"names":["Spacer","constructor","log","readBolInfo","Promise","resolve","reject","readable","args","process","stdin","fs","createReadStream","encoding","info","spaces","tabs","on","err","writable","fileContents","i","atBol","length","c","pipe","writeNewFile","untabify","s","ts","t","n","repeat","tabify","r","ns","newSpaces","newTabs","stream","PassThrough","stdout","createWriteStream","flags","toTabs","write","end","run","argv","options","string","boolean","alias","default","version","fullVersion","help","existsSync","error","bolList","includes","join","parseInt","bolType","msg"],"mappings":"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","file":"spacer.js","sourcesContent":["import parseArgs from 'minimist'\nimport fs from 'fs'\nimport concat from 'concat-stream'\nimport { fullVersion } from './version'\nimport autoBind from 'auto-bind2'\nimport stream from 'stream'\n\nexport class Spacer {\n  constructor(log) {\n    this.log = log\n    autoBind(this)\n  }\n\n  readBolInfo() {\n    return new Promise((resolve, reject) => {\n      const readable = (!this.args['input-file'] ? process.stdin :\n        fs.createReadStream(this.args['input-file'], { encoding: 'utf8' }))\n\n      // Read the entire file && determine all the different line endings\n      let info = {\n        spaces: 0,\n        tabs: 0,\n      }\n\n      readable.on('error', (err) => {\n        reject(err)\n      })\n\n      let writable = concat((fileContents) => {\n        info.fileContents = fileContents\n        let i = 0\n        let atBol = true\n\n        while (i < fileContents.length) {\n          const c = fileContents[i]\n\n          if (atBol) {\n            if (c === ' ') {\n              info.spaces += 1\n            } else if (c === '\\t') {\n              info.tabs += 1\n            } else {\n              atBol = false\n            }\n          } else if (c === '\\n') {\n            atBol = true\n          }\n\n          i += 1\n        }\n\n        resolve(info)\n      })\n      readable.pipe(writable)\n    })\n  }\n\n  async writeNewFile(info) {\n    function untabify(s, ts) {\n      let t = ''\n\n      for (let i = 0; i < s.length; i++) {\n        const c = s[i]\n\n        if (c === '\\t') {\n          const n = ts - (t.length % ts)\n\n          t += ' '.repeat(n)\n        } else {\n          t += c\n        }\n      }\n\n      return t\n    }\n\n    function tabify(s, ts, r) {\n      let ns = 0\n      let t = ''\n\n      for (let i = 0; i < s.length; i++) {\n        const c = s[i]\n\n        if (c === ' ') {\n          ns += 1\n        }\n\n        if (ns % ts === 0) {\n          t += '\\t'\n          ns = 0\n        }\n      }\n\n      if (ns > 0) {\n        if (!r) {\n          t += ' '.repeat(ns)\n        } else {\n          ns = 0\n        }\n      }\n\n      return [t, ns]\n    }\n\n    return new Promise((resolve, reject) => {\n      info.newSpaces = 0\n      info.newTabs = 0\n\n      let writable = null\n\n      if (!this.args['output-file']) {\n        writable = new stream.PassThrough()\n        writable.pipe(process.stdout)\n      } else {\n        writable = fs.createWriteStream(this.args['output-file'], { flags: 'w', encoding: 'utf8' })\n      }\n\n      writable.on('finish', () => {\n        resolve()\n      })\n      writable.on('error', (err) => {\n        reject()\n      })\n\n      const toTabs = (this.args['new-bol'] === 'tabs')\n      let atBol = true\n      let ts = this.args['tab-size']\n      let r = this.args['round']\n      let i = 0\n      let s = ''\n\n      while (i < info.fileContents.length) {\n        const c = info.fileContents[i]\n\n        if (c === '\\n') {\n          s = ''\n          atBol = true\n          writable.write(c)\n        } else if (atBol) {\n          if (c === ' ' || c === '\\t') {\n            s += c\n          } else {\n            atBol = false\n\n            s = untabify(s, ts)\n\n            if (toTabs) {\n              const [t, ns] = tabify(s, ts, r)\n\n              s = t\n              info.newTabs += t.length - ns\n              info.newSpaces += ns\n            } else {\n              info.newSpaces += s.length\n            }\n\n            writable.write(s)\n            writable.write(c)\n            atBol = false\n          }\n        } else {\n          writable.write(c)\n        }\n\n        i += 1\n      }\n\n      writable.end()\n    })\n  }\n\n  async run(argv) {\n    const options = {\n      string: [ 'new-bol', 'output-file', 'tab-size' ],\n      boolean: [ 'help', 'version', 'round' ],\n      alias: {\n        'o': 'output-file',\n        'n': 'new-bol',\n        't': 'tab-size',\n        'r': 'round',\n      },\n      default: {\n        'round': false,\n        'tab-size': '2',\n      }\n    }\n    let args = parseArgs(argv, options)\n\n    if (args.version) {\n      this.log.info(fullVersion)\n      return 0\n    }\n\n    if (args.help) {\n      this.log.info(`\nBeginning of line normalizer.\n\nspacer [<options>] <file>\n\n<file>                      The input file. Defaults to reading from STDIN.\n-o, --output-file <file>    The output file. Can be the same as the input file. Defaults to STDOUT.\n-n, --new-bol <space>       The new BOL line spacing, either 'tabs' or 'spaces' or 'auto'.\n                            Default is to just report.\n-t, --tab-size              The tab size to assume in the existing file, in spaces. Defaults to 2.\n-r, --round                 When tabifying, rounds extra spaces down to a whole number of tabs.\n                            Defaults to false.\n--help                      Displays help\n--version                   Displays version\n`)\n      return 0\n    }\n\n    args['input-file'] = (args['_'].length > 0 ? args['_'][0] : null)\n\n    if (args['input-file'] && !fs.existsSync(args['input-file'])) {\n      this.log.error(`File '${args['input-file']}' does not exist`)\n      return -1\n    }\n\n    const bolList = ['tabs', 'spaces', 'auto']\n    if (args['new-bol'] && !bolList.includes(args['new-bol'])) {\n      this.log.error(`New BOL must be one of ${bolList.join(', ')}`)\n      return -1\n    }\n\n    args['tab-size'] = parseInt(args['tab-size'])\n    this.args = args\n\n    const info = await this.readBolInfo()\n    const bolType = (s, t) => (t > 0 ? (s > 0 ? 'mixed' : 'tabs') : 'spaces')\n    let msg = `'${args['input-file'] || '<STDIN>'}', ${bolType(info.spaces, info.tabs)}`\n\n    if (args['new-bol']) {\n      if (args['new-bol'] === 'auto') {\n        if (info.spaces > info.tabs) {\n          args['new-bol'] = 'spaces'\n        } else {\n          args['new-bol'] = 'tabs'\n        }\n      }\n\n      await this.writeNewFile(info)\n\n      msg += ` -> '${args['output-file'] || '<stdout>'}', ${bolType(info.newSpaces, info.newTabs)}`\n    }\n\n    this.log.info(msg)\n\n    return 0\n  }\n}\n"]}