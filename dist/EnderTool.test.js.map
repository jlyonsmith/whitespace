{"version":3,"sources":["../src/EnderTool.test.js"],"names":["writeFileAsync","util","promisify","fs","writeFile","readFileAsync","readFile","getMockLog","info","jest","fn","log","error","getOutput","calls","mock","length","test","done","mockLog","tool","EnderTool","exitCode","run","expect","toBe","toEqual","stringContaining","testGetInfo","def","inFile","tempy","file","in","toMatch","toHexArray","s","Array","fill","map","_","i","charCodeAt","toString","padStart","join","testConvert","outFile","newEol","content","encoding","out"],"mappings":"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","sourcesContent":["import { EnderTool } from \"./EnderTool\"\nimport tempy from \"tempy\"\nimport fs from \"fs\"\nimport util from \"util\"\n\nconst writeFileAsync = util.promisify(fs.writeFile)\nconst readFileAsync = util.promisify(fs.readFile)\n\nfunction getMockLog() {\n  return {\n    info: jest.fn(),\n    log: jest.fn(),\n    error: jest.fn(),\n  }\n}\n\nfunction getOutput(fn) {\n  const calls = fn.mock.calls\n  if (calls.length > 0 && calls[0].length > 0) {\n    return calls[0][0]\n  } else {\n    return \"\"\n  }\n}\n\ntest(\"test help\", async (done) => {\n  const mockLog = getMockLog()\n  const tool = new EnderTool(mockLog)\n\n  const exitCode = await tool.run([\"--help\"])\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toEqual(expect.stringContaining(\"--help\"))\n  done()\n})\n\nconst testGetInfo = (def) => async (done) => {\n  const mockLog = getMockLog()\n  const tool = new EnderTool(mockLog)\n  const inFile = tempy.file()\n\n  await writeFileAsync(inFile, def.in)\n  let exitCode = await tool.run([inFile])\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toMatch(def.info)\n  done()\n}\n\ntest(\"lf info\", testGetInfo({ in: \"\\r\", info: /cr, 2 lines/ }))\ntest(\"crlf info\", testGetInfo({ in: \"\\r\\n\", info: /crlf, 2 lines/ }))\ntest(\"mixed1 info\", testGetInfo({ in: \"\\n\\r\\n\\r\", info: /mixed, 4 lines/ }))\ntest(\"mixed2 info\", testGetInfo({ in: \"\\n\\n\\r\\n\\r\", info: /mixed, 5 lines/ }))\ntest(\"mixed3 info\", testGetInfo({ in: \"\\n\\r\\n\\r\\r\", info: /mixed, 5 lines/ }))\ntest(\"mixed4 info\", testGetInfo({ in: \"\\n\\r\\n\\r\\r\\n\", info: /mixed, 5 lines/ }))\n\nconst toHexArray = (s) =>\n  Array(s.length)\n    .fill()\n    .map((_, i) =>\n      s\n        .charCodeAt(i)\n        .toString(16)\n        .padStart(2, \"0\")\n    )\n    .join(\" \")\n\nconst testConvert = (def) => async (done) => {\n  const mockLog = getMockLog()\n  const tool = new EnderTool(mockLog)\n  const inFile = tempy.file()\n  const outFile = tempy.file()\n\n  await writeFileAsync(inFile, def.in)\n  let exitCode = await tool.run([inFile, \"-o\", outFile, \"-n\", def.newEol])\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toMatch(def.info)\n  const content = await readFileAsync(outFile, { encoding: \"utf8\" })\n  expect(toHexArray(content)).toBe(toHexArray(def.out))\n  done()\n}\n\ntest(\n  \"cr to lf\",\n  testConvert({\n    in: \"\\r\",\n    newEol: \"lf\",\n    out: \"\\n\",\n    info: /cr, 2 lines.*lf, 2 lines/,\n  })\n)\ntest(\n  \"lf to cr\",\n  testConvert({\n    in: \"\\n\",\n    newEol: \"cr\",\n    out: \"\\r\",\n    info: /lf, 2 lines.*cr, 2 lines/,\n  })\n)\ntest(\n  \"crlf to lf\",\n  testConvert({\n    in: \"\\r\\n\",\n    newEol: \"lf\",\n    out: \"\\n\",\n    info: /crlf, 2 lines.*lf, 2 lines/,\n  })\n)\ntest(\n  \"crlf to lf\",\n  testConvert({\n    in: \"\\r\\n\",\n    newEol: \"lf\",\n    out: \"\\n\",\n    info: /crlf, 2 lines.*lf, 2 lines/,\n  })\n)\ntest(\n  \"crlf to cr\",\n  testConvert({\n    in: \"\\r\\n\",\n    newEol: \"cr\",\n    out: \"\\r\",\n    info: /crlf, 2 lines.*cr, 2 lines/,\n  })\n)\ntest(\n  \"mixed1 to auto\",\n  testConvert({\n    in: \"\\n\\r\\n\\r\",\n    newEol: \"auto\",\n    out: \"\\n\\n\\n\",\n    info: /mixed, 4 lines.*lf, 4 lines/,\n  })\n)\ntest(\n  \"mixed2 to auto\",\n  testConvert({\n    in: \"\\n\\n\\r\\n\\r\",\n    newEol: \"auto\",\n    out: \"\\n\\n\\n\\n\",\n    info: /mixed, 5 lines.*lf, 5 lines/,\n  })\n)\ntest(\n  \"mixed3 to auto\",\n  testConvert({\n    in: \"\\n\\r\\n\\r\\r\",\n    newEol: \"auto\",\n    out: \"\\r\\r\\r\\r\",\n    info: /mixed, 5 lines.*cr, 5 lines/,\n  })\n)\ntest(\n  \"mixed4 to auto\",\n  testConvert({\n    in: \"\\n\\r\\n\\r\\r\\n\",\n    newEol: \"auto\",\n    out: \"\\r\\n\\r\\n\\r\\n\\r\\n\",\n    info: /mixed, 5 lines.*crlf, 5 lines/,\n  })\n)\n"],"file":"EnderTool.test.js"}