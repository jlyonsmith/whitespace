{"version":3,"sources":["../src/ender.js"],"names":["Ender","constructor","log","readLineEndingInfo","Promise","resolve","reject","readable","inputFilename","process","stdin","createReadStream","encoding","numCR","numLF","numCRLF","numLines","on","err","writeable","fileContents","i","length","c","numEndings","pipe","writeNewFile","newNumLines","newLineEnding","newlineChars","createWriteStream","outputFilename","flags","write","end","run","argv","options","string","boolean","alias","default","args","help","info","existsSync","error","msg","n","ender","console","slice","then","exitCode","exit","catch"],"mappings":"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","file":"ender.js","sourcesContent":["import parseArgs from 'minimist'\nimport fs from 'fs'\nimport concat from 'concat-stream'\nimport autoBind from 'auto-bind2'\n\nexport class Ender {\n  constructor(log) {\n    autoBind(this)\n    this.log = log\n  }\n\n  async readLineEndingInfo() {\n    return new Promise((resolve, reject) => {\n      const readable = (!this.inputFilename ? process.stdin :\n        fs.createReadStream(this.inputFilename, { encoding: 'utf8' }))\n\n      // Read the entire file && determine all the different line endings\n      this.numCR = 0\n      this.numLF = 0\n      this.numCRLF = 0\n      this.numLines = 1\n\n      readable.on('error', (err) => {\n        reject(err)\n      })\n      let writeable = concat((fileContents) => {\n        this.fileContents = fileContents\n        let i = 0\n        while (i < fileContents.length) {\n          const c = fileContents[i]\n\n          if (c == '\\r') {\n            if (i < fileContents.length - 1 && fileContents[i + 1] == '\\n') {\n              this.numCRLF += 1\n              i += 1\n            } else {\n              this.numCR += 1\n            }\n\n            this.numLines += 1\n          } else if (c == '\\n') {\n            this.numLF += 1\n            this.numLines += 1\n          }\n          i += 1\n        }\n\n        this.numEndings = (this.numCR > 0 ? 1 : 0) + (this.numLF > 0 ? 1 : 0) + (this.numCRLF > 0 ? 1 : 0)\n        resolve()\n      })\n      readable.pipe(writeable)\n    })\n  }\n\n  async writeNewFile() {\n    return new Promise((resolve, reject) => {\n      let newNumLines = 1\n\n      if ((this.newLineEnding === 'cr' && this.numCR + 1 === this.numLines) ||\n          (this.newLineEnding === 'lf' && this.numLF + 1 === this.numLines) ||\n          (this.newLineEnding === 'crlf' && this.numCRLF + 1 === this.numLines)) {\n        // We're not changing the line endings; nothing to do\n        return resolve()\n      }\n\n      const newlineChars = (this.newLineEnding === 'cr' ? '\\r' : this.newLineEnding === 'lf' ? '\\n' : '\\r\\n')\n      const writeable = fs.createWriteStream(this.outputFilename, { flags: 'w', encoding: 'utf8' })\n\n      writeable.on('finish', () => {\n        resolve()\n      })\n      writeable.on('error', (err) => {\n        reject()\n      })\n\n      let i = 0\n      while (i < this.fileContents.length) {\n        const c = this.fileContents[i]\n\n        if (c == '\\r') {\n          if (i < this.fileContents.length - 1 && this.fileContents[i + 1] == '\\n') {\n            i += 1\n          }\n\n          newNumLines += 1\n          writeable.write(newlineChars)\n        } else if (c == '\\n') {\n          newNumLines += 1\n          writeable.write(newlineChars)\n        } else {\n          writeable.write(c)\n        }\n\n        i += 1\n      }\n      writeable.end()\n      this.newNumLines = newNumLines\n    })\n  }\n\n  async run(argv) {\n    const options = {\n      string: [ 'new-line-ending', 'output-file' ],\n      boolean: [ 'help', 'version' ],\n      alias: {\n        'o': 'output-file',\n        'n': 'new-line-ending'\n      },\n      default: {\n        'new-line-ending': 'auto'\n      }\n    }\n    let args = parseArgs(argv, options)\n\n    if (args.help) {\n      this.log.info(`\nLine ending fixer. Defaults to reading from stdin.\n\n-o, --output-file <file>        The output file. Can be the same as the input file.\n-n, --new-line-ending <ending>  The new line ending, either 'auto', 'cr', 'lf', 'crlf'.  'auto' will use the most\n                                commonly occurring ending.\n--help                          Displays help\n--version                       Displays version\n`)\n      return 0\n    }\n\n    this.inputFilename = (args['_'].length > 0 ? args['_'][0] : null)\n    this.outputFilename = args['output-file']\n    this.newLineEnding = args['new-line-ending']\n\n    if (this.inputFilename && !fs.existsSync(this.inputFilename)) {\n      this.log.error(`File '${this.inputFilename}' does not exist`)\n      return -1\n    }\n\n    let msg = ''\n\n    await this.readLineEndingInfo()\n\n    msg += `\"${this.inputFilename}\", ${this.numEndings > 1 ? 'mixed' : this.numCR > 0 ? 'cr' : this.numLF > 0 ? 'lf' : 'crlf'}, ${this.numLines} lines`\n\n    if (!this.outputFilename) {\n      this.log.error(msg)\n      return 0\n    }\n\n    if (this.newLineEnding === 'auto') {\n      // Find the most common line ending && make that the automatic line ending\n      this.newLineEnding = 'lf'\n      let n = this.numLF\n\n      if (this.numCRLF > n) {\n        this.newLineEnding = 'crlf'\n        n = this.numCRLF\n      }\n\n      if (this.numCR > n) {\n        this.newLineEnding = 'cr'\n      }\n    }\n\n    await this.writeNewFile()\n\n    msg += ` -> \"${this.outputFilename}\", ${this.newLineEnding}, ${this.newNumLines} lines`\n    this.log.error(msg)\n    return 0\n  }\n}\n\nconst ender = new Ender(console)\nender.run(process.argv.slice(2)).then((exitCode) => {\n  process.exit(exitCode)\n}).catch((err) => {\n  console.error(err)\n})\n"]}