{"version":3,"sources":["../src/SpacerTool.test.js"],"names":["writeFileAsync","util","promisify","fs","writeFile","readFileAsync","readFile","getMockLog","info","jest","fn","log","error","getOutput","calls","mock","length","test","done","mockLog","tool","SpacerTool","exitCode","run","expect","toBe","toEqual","stringContaining","testGetInfo","def","inFile","tempy","file","in","toMatch","space1","space1_spaces","space2","space2_tabs","toHexArray","s","Array","fill","map","_","i","charCodeAt","toString","padStart","join","testConvert","outFile","round","newBol","content","encoding","out"],"mappings":"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","sourcesContent":["import { SpacerTool } from \"./SpacerTool\"\nimport tempy from \"tempy\"\nimport fs from \"fs\"\nimport util from \"util\"\n\nconst writeFileAsync = util.promisify(fs.writeFile)\nconst readFileAsync = util.promisify(fs.readFile)\n\nfunction getMockLog() {\n  return {\n    info: jest.fn(),\n    log: jest.fn(),\n    error: jest.fn(),\n  }\n}\n\nfunction getOutput(fn) {\n  const calls = fn.mock.calls\n  if (calls.length > 0 && calls[0].length > 0) {\n    return calls[0][0]\n  } else {\n    return \"\"\n  }\n}\n\ntest(\"test help\", async (done) => {\n  const mockLog = getMockLog()\n  const tool = new SpacerTool(mockLog)\n\n  const exitCode = await tool.run([\"--help\"])\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toEqual(expect.stringContaining(\"--help\"))\n  done()\n})\n\nconst testGetInfo = (def) => async (done) => {\n  const mockLog = getMockLog()\n  const tool = new SpacerTool(mockLog)\n  const inFile = tempy.file()\n\n  await writeFileAsync(inFile, def.in)\n  let exitCode = await tool.run([inFile])\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toMatch(def.info)\n  done()\n}\n\nconst space1 =\n  \"    \\n\" +\n  \"    a\\n\" +\n  \"\\n\" +\n  \"\\tb\\n\" +\n  ' \\t   c = @\"1\"; c1 = @\"2\"\\n' +\n  \"  d; d1\\t; d2\\n\" +\n  \"\\t  e\\n\" +\n  '\\t@\"123\"\\n' +\n  '    @\"1\\n' +\n  \"\\t1\\n\" +\n  '    2\"\\n' +\n  \"f\\n\" +\n  \"\\n\" +\n  '    \" @\"\\n' +\n  \"\\tg\\n\" +\n  \"\\n\"\n\nconst space1_spaces =\n  \"\\n\" +\n  \"    a\\n\" +\n  \"\\n\" +\n  \"  b\\n\" +\n  '     c = @\"1\"; c1 = @\"2\"\\n' +\n  \"  d; d1\t; d2\\n\" +\n  \"    e\\n\" +\n  '  @\"123\"\\n' +\n  '    @\"1\\n' +\n  \"  1\\n\" +\n  '    2\"\\n' +\n  \"f\\n\" +\n  \"\\n\" +\n  '    \" @\"\\n' +\n  \"  g\\n\" +\n  \"\\n\"\n\nconst space2 =\n  \"a:\\n\" + \"{\\n\" + \"\\tb: 1,\\n\" + \"  c: 2,\\n\" + \" \\t d:\\t3\\n\" + \" }\\n\" + \"\\n\"\n\nconst space2_tabs =\n  \"a:\\n\" + \"{\\n\" + \"\\tb: 1,\\n\" + \"\\tc: 2,\\n\" + \"\\td:\\t3\\n\" + \"}\\n\" + \"\\n\"\n\ntest(\"space1 info\", testGetInfo({ in: space1, info: /, mixed/ }))\ntest(\"space2 info\", testGetInfo({ in: space1, info: /, mixed/ }))\n\nconst toHexArray = (s) =>\n  Array(s.length)\n    .fill()\n    .map((_, i) =>\n      s\n        .charCodeAt(i)\n        .toString(16)\n        .padStart(2, \"0\")\n    )\n    .join(\" \")\n\nconst testConvert = (def) => async (done) => {\n  const mockLog = getMockLog()\n  const tool = new SpacerTool(mockLog)\n  const inFile = tempy.file()\n  const outFile = tempy.file()\n\n  await writeFileAsync(inFile, def.in)\n  const round = def.round ? [\"-r\"] : []\n  const newBol = def.newBol ? [\"-n\", def.newBol] : []\n  let exitCode = await tool.run([inFile, \"-o\", outFile, ...round, ...newBol])\n  expect(exitCode).toBe(0)\n  expect(getOutput(mockLog.info)).toMatch(def.info)\n  const content = await readFileAsync(outFile, { encoding: \"utf8\" })\n  expect(toHexArray(content)).toBe(toHexArray(def.out))\n  done()\n}\n\ntest(\n  \"space1 to spaces\",\n  testConvert({\n    in: space1,\n    newBol: \"spaces\",\n    out: space1_spaces,\n    info: /, mixed.*spaces/,\n  })\n)\ntest(\n  \"space2 to tabs\",\n  testConvert({\n    in: space2,\n    newBol: \"tabs\",\n    round: true,\n    out: space2_tabs,\n    info: /, mixed.*tabs/,\n  })\n)\n"],"file":"SpacerTool.test.js"}